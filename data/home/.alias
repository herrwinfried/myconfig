OhMyPoshTheme="~/.poshthemes/default.omp.json"

if [ -d "$HOME/bin" ]; then
PATH+=":$HOME/bin"
fi

if [ -d "$HOME/development" ]; then
PATH+=":$HOME/development"
fi

if [ -d "$HOME/.local/bin" ]; then
PATH+=":$HOME/.local/bin"
fi

if [ -f "$HOME/bin/docker" ]; then
export DOCKER_HOST=unix:///run/user/1000/docker.sock
fi

function checkwsl() {
unameout=$(uname -r | tr '[:upper:]' '[:lower:]');
if [[ "$unameout" = "*microsoft*" || "$unameout" = "*wsl*" ]] || \
[ -f /proc/sys/fs/binfmt_misc/WSLInterop ] || \
[ $WSL_DISTRO_NAME ] || \
[ "$(echo $(cat /proc/cpuinfo | grep -m1 microcode | cut -f2 -d:))" = "0xffffffff" ] && [ $WSL_DISTRO_NAME ]; then
    return 0
else
    return 1
fi
}

if [ -f "/home/linuxbrew/.linuxbrew/bin/brew" ]; then
eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

function brewInstall {
    brew install $1 < /dev/null
}

function brewInstallCask {
    brew install --cask $1 < /dev/null
}

fi

#################### Only ZSH ################
if [ -n "$ZSH_VERSION" ]; then

# OpenSUSE CNF
if [ -f /etc/zsh_command_not_found ]; then
      . /etc/zsh_command_not_found
fi

if [ -x "$(command -v oh-my-posh)" ]; then
eval "$(oh-my-posh init zsh --config $OhMyPoshTheme)"
fi

#
fi
#################### ZSH #####################
##############################################
################ Only BASH ###################
if [ -n "$BASH_VERSION" ]; then

# OpenSUSE CNF
if [ -f /etc/bash_command_not_found ]; then
      . /etc/bash_command_not_found
fi

if [ -x "$(command -v oh-my-posh)" ]; then
eval "$(oh-my-posh init bash --config $OhMyPoshTheme)"
fi

#
fi
################# BASH #######################

#IF NOT WSL
if checkwsl ; then

if [[ -t ancs4linux-ctl ]]; then

function ios_pair {

iosAddress=$(ancs4linux-ctl get-all-hci | jq -r '.[0]')
echo "Connect to $(hostname) from your phone."
ancs4linux-ctl enable-advertising --hci-address $iosAddress --name $(hostname)
}
fi

# IF CLOSE PARENTHESIS [IF NOT WSL]
fi


function Base_Font {
termcols=$(tput cols)
bold="$(tput bold)"
fontnormal="$(tput init)"
fontreset="$(tput reset)"
underline="$(tput smul)"
standout="$(tput smso)"
normal="$(tput sgr0)"
black="$(tput setaf 0)"
red="$(tput setaf 1)"
green="$(tput setaf 2)"
yellow="$(tput setaf 3)"
blue="$(tput setaf 4)"
magenta="$(tput setaf 5)"
cyan="$(tput setaf 6)"
white="$(tput setaf 7)"
}

function rootMode {
if ! [ $# -eq 0 ]; then
XDG_DE=$(echo $XDG_CURRENT_DESKTOP | tr '[:upper:]' '[:lower:]')
if [[ $XDG_DE = "kde" ]]; then 
sudo pkexec env DISPLAY=$DISPLAY XAUTHORITY=$XAUTHORITY KDE_SESSION_VERSION=5 KDE_FULL_SESSION=true $@
else 
sudo pkexec env DISPLAY=$DISPLAY XAUTHORITY=$XAUTHORITY $@
fi

else
echo "$red""You didn't write anything to run.""$white"
fi
}


function englishRun {
if ! [ $# -eq 0 ]; then

LC_ALL=C LANG=$LC_ALL $@

else
echo echo "$red""You didn't write anything to run.""$white"
fi
}

function aliasUpdate {
rm -r ~/.alias && wget "https://raw.githubusercontent.com/herrwinfried/myconfig/linux/data/home/.alias" -O ~/.alias && rm -r ~/.alias.ps1 && wget "https://raw.githubusercontent.com/herrwinfried/myconfig/linux/data/home/.alias.ps1" -O ~/.alias.ps1 && rm -r ~/.alias.fish && wget "https://raw.githubusercontent.com/herrwinfried/myconfig/linux/data/home/.alias.fish" -O ~/.alias.fish
}

