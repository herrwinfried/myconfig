if [ ! -n "$ZSH_VERSION" ] && [ ! -n "$BASH_VERSION" ]; then
echo "$(tput setaf 1)This file is for bash and ZSH. Are you sure you're using Bash or ZSH?$(tput setaf 7)"
fi
OhMyPoshTheme=~/.poshthemes/default.omp.json

if [ -d "$HOME/bin" ]; then
    PATH+=":$HOME/bin"
fi

if [ -d "$HOME/development" ]; then
    PATH+=":$HOME/development"
fi

if [ -d "$HOME/.local/bin" ]; then
    PATH+=":$HOME/.local/bin"
fi

if [ -f "$HOME/bin/docker" ]; then
    export DOCKER_HOST=unix:///run/user/1000/docker.sock
fi

if [ -n "$BASH_VERSION" ]; then
NowShell="bash"
# Set custom BASH directory
BASH_CUSTOM=~/.bash

# Define plugin directories
plugin_dirs=(
  "$BASH_CUSTOM/plugins"
  "/usr/local/share"
  "/usr/share"
)

# Define plugin names
plugin_names=(
)
fi

if [ -n "$ZSH_VERSION" ]; then
NowShell="zsh"
# Set custom ZSH directory
ZSH_CUSTOM=~/.zsh

# Define plugin directories
plugin_dirs=(
  "$ZSH_CUSTOM/plugins"
  "/usr/local/share"
  "/usr/share"
)

# Define plugin names
plugin_names=(
  "zsh-autocomplete"
  "zsh-autosuggestions"
  "zsh-syntax-highlighting"
  "zsh-completions"
)
fi

function Base_Font {
    termcols=$(tput cols)
    bold="$(tput bold)"
    fontnormal="$(tput init)"
    fontreset="$(tput reset)"
    underline="$(tput smul)"
    standout="$(tput smso)"
    normal="$(tput sgr0)"
    black="$(tput setaf 0)"
    red="$(tput setaf 1)"
    green="$(tput setaf 2)"
    yellow="$(tput setaf 3)"
    blue="$(tput setaf 4)"
    magenta="$(tput setaf 5)"
    cyan="$(tput setaf 6)"
    white="$(tput setaf 7)"
}

function checkwsl() {
    unameout=$(uname -r | tr '[:upper:]' '[:lower:]')
    if [[ "$unameout" = "*microsoft*" || "$unameout" = "*wsl*" ]] ||
        [ -f /proc/sys/fs/binfmt_misc/WSLInterop ] ||
        [ $WSL_DISTRO_NAME ] ||
        [ "$(echo $(cat /proc/cpuinfo | grep -m1 microcode | cut -f2 -d:))" = "0xffffffff" ] && [ $WSL_DISTRO_NAME ]; then
        return 0
    else
        return 1
    fi
}



# Function to prepend "sudo" to the command
function prepend_sudo() {
  if [[ $LBUFFER == "sudo "* ]]; then
    LBUFFER=${LBUFFER#sudo }
  else
    LBUFFER="sudo $LBUFFER"
  fi
}

if [ -f "/home/linuxbrew/.linuxbrew/bin/brew" ]; then
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

    function brewInstall {
        brew install $1 </dev/null
    }

    function brewInstallCask {
        brew install --cask $1 </dev/null
    }
fi

# Function to check if a plugin exists and install it
Plugin_Install() {
  if [[ ! -z "${plugin_dirs[*]}" && ! -z "${plugin_names[*]}" ]]; then

    # Function to check if a plugin exists
    is_plugin() {
      local base_dir=$1
      local name=$2
      if [ -n "$BASH_VERSION" ]; then
      test -f "$base_dir/$name/$name.plugin.bash" || test -f "$base_dir/$name/$name.plugin.sh"
      else
      test -f "$base_dir/$name/$name.plugin.zsh"
      fi
    }

    for PluginName in "${plugin_names[@]}"; do
      local -A Plugins=()
      Plugins[$PluginName]=0

      for PluginFolder in "${plugin_dirs[@]}"; do
        if [[ ${Plugins[$PluginName]} -eq 0 ]]; then
          if is_plugin "$PluginFolder" "$PluginName"; then
            Plugins[$PluginName]=1
            if [ -n "$BASH_VERSION" ]; then
            source "$PluginFolder/$PluginName/$PluginName.plugin.bash" || source "$PluginFolder/$PluginName/$PluginName.plugin.sh"
            else
            source "$PluginFolder/$PluginName/$PluginName.plugin.zsh"
            fi
          fi
        fi
      done

      if [[ ${Plugins[$PluginName]} -eq 0 ]]; then
        echo "$(tput setaf 4)[$NowShell] $(tput setaf 3)Plugin Not Found: $(tput setaf 1)'$PluginName'$(tput setaf 7)"
        echo ""
      fi

    done

    unset Plugins
    unset PluginName
    unset PluginFolder

  fi
}
# Function to prepend "sudo" to the command
function prepend_sudo() {
  if [[ $LBUFFER == "sudo "* ]]; then
    LBUFFER=${LBUFFER#sudo }
  else
    LBUFFER="sudo $LBUFFER"
  fi
}

if [ -n "$BASH_VERSION" ]; then
bind -x '"\C-S": prepend_sudo'
else
zle -N prepend_sudo
bindkey '^S' prepend_sudo
fi

Plugin_Install

#IF NOT WSL
if checkwsl; then

    if [[ -x ancs4linux-ctl ]]; then

        function ios_pair {

            iosAddress=$(ancs4linux-ctl get-all-hci | jq -r '.[0]')
            echo "Connect to $(hostname) from your phone."
            ancs4linux-ctl enable-advertising --hci-address $iosAddress --name $(hostname)
        }
    fi

# IF CLOSE PARENTHESIS [IF NOT WSL]
fi

function rootMode {
    if ! [ $# -eq 0 ]; then
        XDG_DE=$(echo $XDG_CURRENT_DESKTOP | tr '[:upper:]' '[:lower:]')
        if [[ $XDG_DE = "kde" ]]; then
            sudo pkexec env DISPLAY=$DISPLAY XAUTHORITY=$XAUTHORITY KDE_SESSION_VERSION=5 KDE_FULL_SESSION=true $@
        else
            sudo pkexec env DISPLAY=$DISPLAY XAUTHORITY=$XAUTHORITY $@
        fi

    else
        echo "$red""You didn't write anything to run.""$white"
    fi
}

function englishRun {
    if ! [ $# -eq 0 ]; then

        LC_ALL=C LANG=$LC_ALL $@

    else
        echo echo "$red""You didn't write anything to run.""$white"
    fi
}

function aliasUpdate {
    rm -r ~/.alias && wget "https://raw.githubusercontent.com/herrwinfried/myconfig/linux/data/home/.alias" -O ~/.alias && rm -r ~/.alias.ps1 && wget "https://raw.githubusercontent.com/herrwinfried/myconfig/linux/data/home/.alias.ps1" -O ~/.alias.ps1 && rm -r ~/.alias.fish && wget "https://raw.githubusercontent.com/herrwinfried/myconfig/linux/data/home/.alias.fish" -O ~/.alias.fish
}

if [ -x "$(command -v oh-my-posh)" ] && [ -f $OhMyPoshTheme ]; then

    if [[ "$TERM" != "linux" ]]; then
            eval "$(oh-my-posh init $NowShell --config $OhMyPoshTheme)"
        fi

function OhMyPoshThemeUpdate {
$themeFile = "$HOME/.poshthemes/default.omp.json"
wget "https://raw.githubusercontent.com/herrwinfried/myconfig/linux/data/default.omp.json" -O $themeFile
}
fi


unset NowShell
