#!/bin/bash
GetScriptDir=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
GetScriptName=$(basename "${BASH_SOURCE[0]}")

# It will find the supported packages and enable them.
# In case "false" is set, you have to enable it manually one by one.
auto=false

# If you want to enable it manually,
# remove the "#" from the relevant packages.

zypper=true
# dnf=false
# apt=false
brew=true
flatpak=true
snap=true
# ---------------------

Black='\033[0;30m'
DarkBlue='\033[0;34m'
DarkGreen='\033[0;32m'
DarkCyan='\033[0;36m'
DarkRed='\033[0;31m'
DarkMagenta='\033[0;35m'
DarkYellow='\033[0;33m'
Gray='\033[0;37m'
DarkGray='\033[1;30m'
Blue='\033[1;34m'
Green='\033[1;32m'
Cyan='\033[1;36m'
Red='\033[1;31m'
Magenta='\033[1;35m'
Yellow='\033[1;33m'
White='\033[1;37m'
NoColor='\033[0m' # No Color

USER_PASSWORD=""
function rootpassword {
if [[ $EUID -eq 0 ]]; then
     echo -e "${Red}You must not be Super User/Root.${NoColor}"
   exit 1
fi
sudo --reset-timestamp
# shellcheck disable=SC2162
echo -n -e "${Cyan}Password for ${Red}root:${NoColor} "
# shellcheck disable=SC2162
read -s USER_PASSWORD
echo -e "\n${Yellow}Password checking...${NoColor}"
if echo "$USER_PASSWORD" | sudo -S true >/dev/null 2>&1; then
    echo -e "${Green}Password verified.${NoColor}\n"
    function SUDO {
        # shellcheck disable=SC2317
        echo "$USER_PASSWORD" | sudo -S "$@"
    }
else
    echo -e "${Red}Password could not be verified ${NoColor}\n"
    rootpassword
fi  
}
function rootpassword_end {
    unset USER_PASSWORD
    sudo --reset-timestamp
}

function InternetCheck {
 curl -s --head http://www.google.com | grep "200 OK" > /dev/null
    if [ $? -ne 0 ]; then
        echo -e "${Red}You do not have an Internet Connection.${NoColor}"
        exit 1
    fi   
}
function Flatpak_SysUpdate {
    InternetCheck
    Yes=$1
    if [[ $Yes = "yes" || $Yes = "-y"  || $Yes = "true" ]]; then
        Yes="-y"
    else
        Yes=""
    fi

    PackagePrep="flatpak"
    Package="$PackagePrep"
    PackageUpdate="upgrade $Yes"

    SUDO su -c "$Package $PackageUpdate"
}

function Snapd_SysUpdate {
InternetCheck
    PackagePrep="snap"
    Package="$PackagePrep"
    PackageUpdate="update"

    SUDO su -c "$Package $PackageUpdate"

}

function Homebrew_SysUpdate {
    InternetCheck
    if [ -f "/home/linuxbrew/.linuxbrew/bin/brew" ]; then
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        PackagePrep="brew"
        Package="$PackagePrep"
        PackageUpdate="upgrade"
        PackageRefresh="update"

        SUDO su -c "$Package $PackageRefresh && $Package $PackageUpdate"
    fi
}

function Debian_SysUpdate {
# APT
    InternetCheck
        Yes=$1
    if [[ $Yes = "yes" || $Yes = "-y"  || $Yes = "true" ]]; then
        Yes="-y"
    else
        Yes=""
    fi
    PackagePrep="apt"
    Package="$PackagePrep"
    PackageUpdate="upgrade --allow-unauthenticated $Yes"
    PackageRefresh="update"

    SUDO su -c "$Package $PackageRefresh && $Package $PackageUpdate"
}

function Fedora_SysUpdate {
# DNF
    InternetCheck
        Yes=$1
        Rolling=$2
    if [[ $Yes = "yes" || $Yes = "-y"  || $Yes = "true" ]]; then
        Yes="-y"
    else
        Yes=""
    fi
    if [[ $Rolling = "yes" || $Rolling = "-y"  || $Rolling = "true" ]]; then
        Rolling="distro-sync"
    else
        Rolling="update"
    fi
    
    PackagePrep="dnf"
    Package="$PackagePrep"
    PackageUpdate="$Rolling --nogpgcheck $Yes"
    PackageRefresh="makecache"

    SUDO su -c "$Package $PackageRefresh && $Package $PackageUpdate"
}

function Opensuse_SysUpdate {
# ZYPPER
    InternetCheck
        Yes=$1
        Rolling=$2
    if [[ $Yes = "yes" || $Yes = "-y"  || $Yes = "true" ]]; then
        Yes="-y"
    else
        Yes=""
    fi
    if [[ $Rolling = "yes" || $Rolling = "-y"  || $Rolling = "true" ]]; then
        Rolling="dup"
    else
        Rolling="up"
    fi
    
    PackagePrep="zypper"
    Package="$PackagePrep --gpg-auto-import-keys"
    PackageUpdate="$Rolling --details -l $Yes"
    PackageRefresh="ref"

    SUDO su -c "$Package $PackageRefresh && $Package $PackageUpdate"
}

function auto_package {
    if [ $auto = "true" ]; then
        if type -P flatpak > /dev/null; then
            flatpak=true
        fi
        if type -P snap > /dev/null; then
            snap=true
        fi
        if type -P brew > /dev/null; then
            brew=true
        fi
        # INTERNAL PACKAGES
        if type -P apt > /dev/null; then
            apt=true
        fi
        elif type -P dnf > /dev/null; then
            dnf=true
        elif type -P zypper > /dev/null; then
            zypper=true
    fi
}

function CheckCommand {
    if type -P $1 > /dev/null; then
        return 0
    else
        return 1
    fi
}


function package_install {
    Arg=$1
    . /etc/os-release
    DISTRO=$(echo $NAME | tr '[:upper:]' '[:lower:]')

    if [[ $flatpak == "true" ]]; then
        if CheckCommand flatpak; then
            Flatpak_SysUpdate $1
        fi
    fi

    if [[ $snap == "true" ]]; then
        if CheckCommand snap; then
            Snapd_SysUpdate
        fi
    fi

    if [[ $brew == "true" ]]; then
        if CheckCommand brew; then
            Homebrew_SysUpdate
        fi
    fi

    if [[ $apt == "true" ]]; then
        if CheckCommand apt; then
            Debian_SysUpdate $1
        fi
    fi
    if [[ $dnf == "true" ]]; then
        if CheckCommand dnf; then
            if [[ $DISTRO == *tumbleweed* ]]; then
                Fedora_SysUpdate yes $1
            else
                Fedora_SysUpdate no $1
            fi
        fi
    fi
    if [[ $zypper == "true" ]]; then
        if CheckCommand zypper; then
            if [[ $DISTRO == *tumbleweed* ]]; then
                Opensuse_SysUpdate yes $1
            else
                Opensuse_SysUpdate no $1
            fi
        fi
    fi 
}

function HelpFunction {
    echo -e "${Yellow}Usage:${NoColor}"
    echo -e "    ${GetScriptName} [OPTIONS]"
    echo -e ""
    echo -e "${Yellow}Options:${NoColor}"
    echo -e "    --help, -h, help     Display this help message."
    echo -e "    update               Update the script."
    echo -e "    apt                  Update APT package manager."
    echo -e "    dnf                  Update DNF package manager."
    echo -e "    zypper               Update Zypper package manager."
    echo -e "    flatpak              Update Flatpak package manager."
    echo -e "    snap                 Update Snap package manager."
    echo -e "    brew                 Update Homebrew package manager."
    echo -e "    yes                  Automatically confirm all package updates."
    echo -e ""
    echo -e "${Yellow}Examples:${NoColor}"
    echo -e "    ${GetScriptName} apt yes"
    echo -e "    ${GetScriptName} dnf"
    echo -e "    ${GetScriptName} flatpak"
    echo -e ""
}


if [ $# -ne 0 ]; then
    Yes=false

    i=1
    j=$#

    while [ $i -le $j ]; do
        n=$(echo "$1" | tr '[:upper:]' '[:lower:]')

        if [[ $n == "--help" ]] || [[ $n == "-h" ]] || [[ $n == "help" ]]; then
            HelpFunction
            exit 1
        elif [ "$1" = "update" ]; then
        curl -L https://raw.githubusercontent.com/herrwinfried/myconfig/linux/dotfiles/scripts/SystemUpdate -o "${GetScriptDir}/SystemUpdate"
        exit 1
        elif [[ $n == "apt" ]]; then
            apt=true
        elif [[ $n == "dnf" ]]; then
            dnf=true
        elif [[ $n == "zypper" ]]; then
            zypper=true
        elif [[ $n == "flatpak" ]]; then
            flatpak=true
        elif [[ $n == "snap" ]]; then
            snap=true
        elif [[ $n == "brew" ]]; then
            brew=true
        elif [[ $n == "yes" ]]; then
            Yes=true

        else
        echo -e "${Red}invalid argument $n ${NoColor}"
        sleep 1
        fi

        i=$((i + 1))
        shift 1
    done
fi

rootpassword
if [[ $zypper != "true" && $dnf != "true"  && $apt != "true" ]] && [[ $brew != "true" && $flatpak != "true"  && $snap != "true" ]]; then
auto_package
fi
package_install $Yes
rootpassword_end